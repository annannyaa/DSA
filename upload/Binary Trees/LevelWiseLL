Given a binary tree, write code to create a separate linked list for each level. You need to return the array which contains head of each level linked list.
*******************************************************
vector<Node<int> *> constructLinkedListForEachLevel(BinaryTreeNode<int> *root)
{
    vector<Node<int> *> output;
    if (root == NULL)
    {
        return output;
    }

    queue<BinaryTreeNode<int> *> pendingNodes;
    pendingNodes.push(root);
    int currentLevelRemaining = 1;
    int nextLevelCount = 0;

    Node<int> *currentLevelHead = NULL;
    Node<int> *currentLevelTail = NULL;
    while (!pendingNodes.empty())
    {
        Node<int> *newNode = new Node<int>(first->data);
        if (currentLevelHead == NULL)
        {
            currentLevelHead = newNode;
            currentLevelTail = newNode;
        }
        else
        {
            currentLevelTail->next = newNode;
            currentLevelTail = newNode;
        }
        if (first->left != NULL)
        {
            pendingNodes.push(first->left);
            nextLevelCount++;
        }
        if (first->right != NULL)
        {
            pendingNodes.push(first->right);
            nextLevelCount++;
        }
        currentLevelRemaining--;
        if (currentLevelRemaining == 0)
        {
            output.push_back(currentLevelHead);
            currentLevelHead = NULL;
            currentLevelTail = NULL;
            currentLevelRemaining = nextLevelCount;
            nextLevelCount = 0;
        }
    }
    return output;
}
