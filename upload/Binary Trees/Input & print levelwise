taking input level-wise
******************************************
#include<queue>
BinaryTreeNode <int>* takeInputLevelWise(){
int rootData;
cout<<"Enter the root data"<<endl;
cin>>rootData;
if(rootData==-1){
return NULL;}
queue <BinaryTreeNode <int>*> pendingNodes;
BinaryTreeNode <int>* root= new BinaryTreeNode <int>(rootData);
pendingNodes.push(root);
while(pendingNodes.size()!=0){
BinaryTreeNode <int>* front= pendingNodes.front();
pendingNodes.pop();
cout<<"Enter the left child of "<< front->data<<endl;
int leftChildData;
cin>>leftChildData;
if(leftChildData!=-1){
BinaryTreeNode <int>* child= new BinaryTreeNode <int>(leftChildData);
front->left=child;
pendingNodes.push(child);}
cout<<"Enter the right child of "<< front->data;
int rightChildData;
cin>>rightChildData;
if(rightChildData!=-1){
BinaryTreeNode <int>* child= new BinaryTreeNode <int>(rightChildData);
front->right=child;
pendingNodes.push(child);
}
}
return root;
}
######################################################

printing level wise tree
******************************************************
#include<queue>
void printLevelWise(BinaryTreeNode<int> *root) {
if(root==NULL){
    return;
}
    queue <BinaryTreeNode<int>*> pendingNodes;
    pendingNodes.push(root);
while(pendingNodes.size()!=0){
    BinaryTreeNode<int> *front=pendingNodes.front();
    pendingNodes.pop();
    cout<<front->data<<":";
	if(front->left!=NULL){
        cout<<"L:"<<front->left->data<<",";
        pendingNodes.push(front->left);
    }
    else{
        cout<<"L:-1,";
    }
    if(front->right!=NULL){
        cout<<"R:"<<front->right->data<<endl;
        pendingNodes.push(front->right);
    }
    else{
        cout<<"R:-1"<<endl;
    }
}    
}
