taking input level-wise
******************************************
#include<queue>
BinaryTreeNode <int>* takeInputLevelWise(){
int rootData;
cout<<"Enter the root data"<<endl;
cin>>rootData;
if(rootData==-1){
return NULL;}
queue <BinaryTreeNode <int>*> pendingNodes;
BinaryTreeNode <int>* root= new BinaryTreeNode <int>(rootData);
pendingNodes.push(root);
while(pendingNodes.size()!=0){
BinaryTreeNode <int>* front= pendingNodes.front();
pendingNodes.pop();
cout<<"Enter the left child of "<< front->data<<endl;
int leftChildData;
cin>>leftChildData;
if(leftChildData!=-1){
BinaryTreeNode <int>* child= new BinaryTreeNode <int>(leftChildData);
front->left=child;
pendingNodes.push(child);}
cout<<"Enter the right child of "<< front->data;
int rightChildData;
cin>>rightChildData;
if(rightChildData!=-1){
BinaryTreeNode <int>* child= new BinaryTreeNode <int>(rightChildData);
front->right=child;
pendingNodes.push(child);
}
}
return root;
}
######################################################

printing level wise tree
******************************************************
#include<queue>
void printLevelWise(BinaryTreeNode<int> *root) {
if(root==NULL){
    return;
}
    queue <BinaryTreeNode<int>*> pendingNodes;
    pendingNodes.push(root);
while(pendingNodes.size()!=0){
    BinaryTreeNode<int> *front=pendingNodes.front();
    pendingNodes.pop();
    cout<<front->data<<":";
	if(front->left!=NULL){
        cout<<"L:"<<front->left->data<<",";
        pendingNodes.push(front->left);
    }
    else{
        cout<<"L:-1,";
    }
    if(front->right!=NULL){
        cout<<"R:"<<front->right->data<<endl;
        pendingNodes.push(front->right);
    }
    else{
        cout<<"R:-1"<<endl;
    }
}    
}
**********************************
MAIN CODE:
#include <iostream>
#include <queue>

template <typename T>
class BinaryTreeNode {
   public:
    T data;
    BinaryTreeNode<T>* left;
    BinaryTreeNode<T>* right;

    BinaryTreeNode(T data) {
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

using namespace std;
#include "solution.h"

BinaryTreeNode<int>* takeInput() {
    int rootData;

    cin >> rootData;
    if (rootData == -1) {
        return NULL;
    }
    BinaryTreeNode<int>* root = new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*> q;
    q.push(root);
    while (!q.empty()) {
        BinaryTreeNode<int>* currentNode = q.front();
        q.pop();
        int leftChild, rightChild;

        cin >> leftChild;
        if (leftChild != -1) {
            BinaryTreeNode<int>* leftNode = new BinaryTreeNode<int>(leftChild);
            currentNode->left = leftNode;
            q.push(leftNode);
        }

        cin >> rightChild;
        if (rightChild != -1) {
            BinaryTreeNode<int>* rightNode =
                new BinaryTreeNode<int>(rightChild);
            currentNode->right = rightNode;
            q.push(rightNode);
        }
    }
    return root;
}

int main() {
    BinaryTreeNode<int>* root = takeInput();
    printLevelWise(root);
}
