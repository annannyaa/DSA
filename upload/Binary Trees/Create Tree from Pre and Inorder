Given Preorder and Inorder traversal of a binary tree,
create the binary tree associated with the traversals.You just need to construct the tree and return the root.
*****************************************************************
Sample Input :
12
1 2 3 4 15 5 6 7 8 10 9 12
4 15 3 2 5 1 6 10 8 7 9 12
Sample Output :
1 
2 6 
3 5 7 
4 8 9 
15 10 12
// left_inorder_end - left_inorder_start = left_preorder_end - left_preorder_start

//                                   inorder ,preorder,inorderstart,inorderend,preorderstart,preorderend
BinaryTreeNode<int>* buildTreeHelper(int* in, int* pre, int inS, int inE, int preS, int preE) {
	if (inS > inE) {
		return NULL;
	}

	int rootData = pre[preS];
	int rootIndex = -1;
	for (int i = inS; i <= inE; i++) {
		if (in[i] == rootData) {
			rootIndex = i;
			break;
		}
	}

	int lInS = inS; //left inorder start
	int lInE = rootIndex - 1;//left inorder end
	int lPreS = preS + 1;//left preorder start
	int lPreE = lInE - lInS + lPreS;//left preorder end   //lInE-lInS=lPreE-lPreS
	int rPreS = lPreE + 1;//right preorder start
	int rPreE = preE;//right preorder end
	int rInS = rootIndex + 1;//right inorder start
	int rInE = inE;//right inorder end
	BinaryTreeNode<int>*  root = new BinaryTreeNode<int>(rootData);
	root->left = buildTreeHelper(in, pre, lInS, lInE, lPreS, lPreE);
	root->right = buildTreeHelper(in, pre, rInS, rInE, rPreS, rPreE);
	return root;
}

BinaryTreeNode<int>* buildTree(int *preorder, int preLength, int *inorder, int inLength) {
    
  
    return buildTreeHelper(inorder,preorder,0,inLength-1,0,preLength-1);
}
*****************************************
/*
 Time complexity: O(N^2)
 Space complexity: O(H)
 where N is the number of nodes in the input tree
 and H is the height of the input tree
*/
BinaryTreeNode<int> *buildTreeHelper(int *preorder, int preStart, int preEnd, int *inorder, int *inStart, int inEnd)
{
    if (preStart > preEnd || inStart > inEnd)
    {
        return NULL;
    }
    int rootVal = preorder[preStart];
    BinaryTreeNode<int> *root = new BinaryTreeNode<int>(rootVal);
    // Find root element index from inorder array
    int k = 0;
    for (int i = inStart; i <= inEnd; i++)
    {
        if (rootVal == inorder[i])
        {
            k = i;
            break;
        }
    }
    root->left = buildTreeHelper(preorder, preStart + 1, preStart + (k - inStart), inorder, inStart, k - 1);
    root->right = buildTreeHelper(preorder, preStart + (k - inStart) + 1, preEnd, inorder, k + 1, inEnd);
    return root;
}
BinaryTreeNode<int> *buildTree(int *preorder, int preLength, int *inorder, int inLength)
{
    int preStart = 0;
    int preEnd = preLength - 1;
    int inStart = 0;
    int inEnd = inLength - 1;
 return buildTreeHelper(preorder, preStart, preEnd, inorder, inStart, inEnd
}
