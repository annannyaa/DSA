Given a binary tree, check if it is balanced. Return true if given binary tree is balanced, false otherwise.
A empty binary tree or binary tree with zero nodes is always balanced. For a non empty binary tree to be balanced, following conditions must be met:
1. The left and right subtrees must be balanced.
2. |hL - hR| <= 1, where hL is the height or depth of left subtree and hR is the height or depth of right subtree.    

approach1: complexity(n.height of tree).
#include<cmath>
int height(BinaryTreeNode<int> *root)
{   if(root==NULL)
       return 0;
 
    return 1+max(height(root->left),height(root->right));
}
bool isBalanced(BinaryTreeNode<int> *root) {
	// Write your code here
   if(root==NULL){
       return 1;
   }
    int l=height(root->left);
    int r=height(root->right);
    if(abs(l-r)<=1&& isBalanced(root->left) && isBalanced(root->right)){
        return 1;
    }
    return 0;
  
}
*********************************************************************************
do with pair class
