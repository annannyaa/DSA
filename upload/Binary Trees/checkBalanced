Given a binary tree, check if it is balanced. Return true if given binary tree is balanced, false otherwise.
A empty binary tree or binary tree with zero nodes is always balanced. For a non empty binary tree to be balanced, following conditions must be met:
1. The left and right subtrees must be balanced.
2. |hL - hR| <= 1, where hL is the height or depth of left subtree and hR is the height or depth of right subtree.    

approach1: complexity(n.height of tree).
#include<cmath>
int height(BinaryTreeNode<int> *root)
{   if(root==NULL)
       return 0;
 
    return 1+max(height(root->left),height(root->right));
}
bool isBalanced(BinaryTreeNode<int> *root) {
	// Write your code here
   if(root==NULL){
       return 1;
   }
    int l=height(root->left);
    int r=height(root->right);
    if(abs(l-r)<=1&& isBalanced(root->left) && isBalanced(root->right)){
        return 1;
    }
    return 0;
  
}
*********************************************************************************
do with pair class
*********************************************************
appraoch 2:

/*
 Time complexity: O(N)
 Space complexity: O(H)
 where N is the number of nodes in the input tree
 and H is the height of the input tree
*/
class BalancedReturnType
{
public:
    int height;
    bool balanced;
};
BalancedReturnType *isBalancedHelper(BinaryTreeNode<int> *root)
{
    if (root == NULL)
    {
        BalancedReturnType *ans = new BalancedReturnType();
        ans->height = 0;
        ans->balanced = true;
        return ans;
    }
    BalancedReturnType *ans1 = isBalancedHelper(root->left);
    BalancedReturnType *ans2 = isBalancedHelper(root->right);
    bool flag;
    if (!(ans1->balanced) || !(ans2->balanced) ||
        abs(ans1->height - ans2->height) > 1)
    {
        flag = false;
    }
    else
    {
        flag = true;
    }
    BalancedReturnType *output = new BalancedReturnType();
    output->height = max(ans1->height, ans2->height) + 1;
    output->balanced = flag;
    return output;
}
bool isBalanced(BinaryTreeNode<int> *root)
{
    if (root == NULL)
    {
        return true;
    }

    return isBalancedHelper(root)->balanced;
}
