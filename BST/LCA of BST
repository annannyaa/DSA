Given a binary search tree and data of two nodes, find 'LCA' (Lowest Common Ancestor) of the given two nodes in the BST.
******************************
int getLCA(BinaryTreeNode<int>* root , int val1 , int val2){
    // Write your code here
    if(root==NULL)
        return -1;
    if(root->data == val1 || root->data== val2)
        return root->data;
    
    int left=getLCA(root->left,val1,val2);
    int right =getLCA(root->right,val1,val2);
    
    if(left== -1 && right == -1)
       return -1;
    else if( left!=-1 &&right ==-1)
        return left;
     else if( left==-1 &&right !=-1)
        return right;
     else
         return root->data;
    
}
********************************************
/*
 Time complexity: O(H)
 Space complexity: O(H)
 where H is the height of the input BST
*/
BinaryTreeNode<int> *getLCAHelper(BinaryTreeNode<int> *root, int a, int b)
{
    if (root == NULL || root->data == a || root->data == b)
    {
        return root;
    }
    if (root->data < a && root->data < b)
    {
        return getLCAHelper(root->right, a, b);
    }
    else if (root->data > a && root->data > b)
    {
        return getLCAHelper(root->left, a, b);
    }
    BinaryTreeNode<int> *leftLCA = getLCAHelper(root->left, a, b);
    BinaryTreeNode<int> *rightLCA = getLCAHelper(root->right, a, b);
    if (leftLCA != NULL && rightLCA != NULL)
    {
        return root;
    }
    else if (leftLCA != NULL)
    {
        return leftLCA;
    }
    return rightLCA;
}
int getLCA(BinaryTreeNode<int> *root, int val1, int val2)
{
    BinaryTreeNode<int> *node = getLCAHelper(root, val1, val2);
}
