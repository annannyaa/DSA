Given a BST, convert it into a sorted linked list. You have to return the head of LL.
class Pair{
  public:
    Node <int>*head;
    Node <int>*tail;
};

Pair BST(BinaryTreeNode<int>* root)
{
    if(root==NULL)
    {
        Pair ans ;
        ans.head=NULL;
        ans.tail=NULL;
        return ans;

    }
    
	Node<int> *node= new Node<int> (root->data);
    
    Pair leftans=BST(root->left);
    Pair rightans=BST(root->right);
    
    
    Pair ans;
    
    if(leftans.head==NULL && rightans.head==NULL)
    {
        
        ans.head=node;
        ans.tail=node;
       
    }
    
   else if(!leftans.head && rightans.head  )
   		 { ans.head=node;
           node->next=rightans.head;
   		     
        	ans.tail=rightans.tail;
  		  }
  else if(leftans.head && rightans.head==NULL)
  		  { ans.head=leftans.head;
      			leftans.tail->next=node;
  		        ans.tail=node;
               
  		  }
    else
    {
        ans.head=leftans.head;
        leftans.tail->next=node;
        node->next=rightans.head;
        ans.tail=rightans.tail;
    }
    
    
    
     return ans;
     
}
Node<int>* constructBST(BinaryTreeNode<int>* root) {
   return BST(root).head;
    
}
**********************************************************
/*
 Time complexity: O(N)
 Space complexity: O(H)
 where N is the number of nodes in the input BST
 and H is the height of the input BST
*/
class Base
{
public:
    Node<int> *head;
    Node<int> *tail;
    Base()
    {
        head = NULL;
        tail = NULL;
    }
};
Base constructLinkedListHelper(BinaryTreeNode<int> *root)
{
    Base combinedList;
    if (root == NULL)
    {
        return combinedList;
    }
    Base leftList = constructLinkedListHelper(root->left);
    Base rightList = constructLinkedListHelper(root->right);
    Node<int> *newNode = new Node<int>(root->data);
    if (leftList.tail != NULL)
    {
        leftList.tail->next = newNode;
    }
    newNode->next = rightList.head;
    if (leftList.head != NULL)
    {
        combinedList.head = leftList.head;
    }
    else
    {
        combinedList.head = newNode;
    }
    if (rightList.tail != NULL)
    {
        combinedList.tail = rightList.tail;
    }
    else
    {
        combinedList.tail = newNode;
    }
    return combinedList;
}
Node<int> *constructLinkedList(BinaryTreeNode<int> *root)
{
    Base list = constructLinkedListHelper(root);
    return list.head;
}
