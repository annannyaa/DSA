fibonacci using recursion:
void Fibonacci(int n){
  if(n<=1){
  return n;
  }
  int a=Fibonacci(n-1);
  int b=Fibonacci(n-2);
  return a+b;
      }
complexity: O(2^n) because recursive calls: 2^n

//the below process is called MEMOIZATION: TOP DOWN APPROACH: saving previous answers so we can use them in future directly. 
int fibo_helper(int n, int *ans) {
	if(n <= 1) {
		return n;
	}

	// Check if output already exists
	if(ans[n] != -1) {
		return ans[n];
	}

	// Calculate output
	int a = fibo_helper(n-1, ans);
	int b = fibo_helper(n-2, ans);

	// Save the output for future use
	ans[n] = a + b;
	
	// Return the final output
	return ans[n];
}

int fibo_2(int n) {
	int *ans = new int[n+1];

	for(int i = 0; i <= n; i++) {
		ans[i] = -1;
	}
	
	return fibo_helper(n, ans);
}

//ITERATIVELY : (or using DYNAMIC PROGRAMMING): BOTTOM-UP APPROACH
int fibo_3(int n) {
	int *ans = new int[n+1];

	ans[0] = 0;
	ans[1] = 1;

	for(int i = 2; i <= n; i++) {
		ans[i] = ans[i-1] + ans[i-2];
	}

	return ans[n];
}
COMPLEXITY: O(n)

int main() {
	int n;
	cin >> n;
	cout << fibo_2(n) << endl;
}
COMPLEXITY: Here we are doing n+1 recursive calls, so O(n) (reduced from O(2^n))
