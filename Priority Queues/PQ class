#include <vector>
#include<cmath>
 class priorityQueues{
  vector<int> pq;
  
  public:
    priorityQueues(){
    }
    
    isEmpty(){
    return pq.size==0;
    }
    
    int getSize(){
    return pq.size;
    }
    
    int getMin(){
    if(isEmpty){
    return 0;
    }
    return pq[0];
    }
    
    void insert(int element){
      pq.push_back(element);
      int childIndex= pq.size() -1;
      while(childIndex > 0){
        int parentIndex = (childIndex -1) / 2;
        if( pq[childIndex] < pq[parentIndex] ){
          int temp = pq[childIndex];
          pq [childIndex]=pq[parentIndex];
          pq [parentIndex]=temp;
        }
        else{
        break;
        }
        childIndex=parentIndex;
     }
     
     int removeMin() {
        // Write your code here
        if(isEmpty()){
            return 0;
        }
        int ans= pq[0];
        pq[0]=pq[pq.size()-1];
        pq.pop_back();
        //down-heapify
        int parentIndex=0;
        int leftChildIndex= 2*parentIndex +1;
        int rightChildIndex=2*parentIndex +2;
        
    while(leftChildIndex<pq.size()){
        int minIndex=parentIndex;
        if(pq[minIndex]>pq[leftChildIndex]){
            minIndex=leftChildIndex;
        }
        if(rightChildIndex <pq.size() && pq[minIndex]>pq[rightChildIndex]){
            minIndex=rightChildIndex;
        }
        if(minIndex==parentIndex){
            break;
        }
        int temp=pq[minIndex];
            pq[minIndex]=pq[parentIndex];
            pq[parentIndex]=temp;
        
        parentIndex=minIndex;
        leftChildIndex= 2*parentIndex +1;
        rightChildIndex=2*parentIndex +2;
    }
        
        
        
        return ans;
     }
};
     ***************************************************
     MAIN CODE:
     
     #include <iostream>
#include <climits>
using namespace std;

#include "solution.h"

int main() {
    PriorityQueue pq;

    int choice;
    cin >> choice;

    while (choice != -1) {
        switch (choice) {
            case 1:  // insert
                int element;
                cin >> element;
                pq.insert(element);
                break;
            case 2:  // getMin
                cout << pq.getMin() << "\n";
                break;
            case 3:  // removeMax
                cout << pq.removeMin() << "\n";
                break;
            case 4:  // size
                cout << pq.getSize() << "\n";
                break;
            case 5:  // isEmpty
                cout << (pq.isEmpty() ? "true\n" : "false\n");
            default:
                return 0;
        }
        
        cin >> choice;
    }
}
########################################################
NOTE:
removeMin code: ALSO CALLED HEAP SORT
HEAP SORT: TIME COMP: insert fn (ntimes)+ removeMin fn (ntimes) 
                       nlogn                nlogn            = which is effectively O(nlogn)
SPACE COMP: O(n). vector of size n
 
