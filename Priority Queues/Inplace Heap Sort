improving space complixty of heap sort from O(nlogn) to O(1). instead of using vector for priority queue.
instead of taking another array to sort the heap, we will make changes in the input array itself.
******************************************
void heapSort(int pq[], int n) {
    // Write your code
    for(int i=1;i<n;i++){
        int childIndex =i;

        while (childIndex > 0) {
            int parentIndex = (childIndex - 1) / 2;
            if (pq[childIndex] < pq[parentIndex]) {
                int temp = pq[childIndex];
                pq[childIndex] = pq[parentIndex];
                pq[parentIndex] = temp;
            } else {
                break;
            }
            childIndex = parentIndex;
        }
    }
    //removing or re-defining array
    int size=n;
	while(size>1){
    	int temp=pq[0];
    	pq[0]=pq[size-1];
    	pq[size-1]=temp;
    	size--;
        int parentIndex=0;
        int leftChildIndex= 2*parentIndex +1;
        int rightChildIndex=2*parentIndex +2;
        
    while(leftChildIndex<size){
        int minIndex=parentIndex;
        if(pq[minIndex]>pq[leftChildIndex]){
            minIndex=leftChildIndex;
        }
        if(rightChildIndex <size && pq[minIndex]>pq[rightChildIndex]){
            minIndex=rightChildIndex;
        }
        if(minIndex==parentIndex){
            break;
        }
        int temp=pq[minIndex];
            pq[minIndex]=pq[parentIndex];
            pq[parentIndex]=temp;
        
        parentIndex=minIndex;
        leftChildIndex= 2*parentIndex +1;
        rightChildIndex=2*parentIndex +2;
    }
    }
    

}
#################################
MAIN CODE:
#include <iostream>
#include "solution.h"

using namespace std;

int main() {
    int size;
    cin >> size;

    int *input = new int[size];

    for (int i = 0; i < size; i++) {
        cin >> input[i];
    } 

    heapSort(input, size);

    for (int i = 0; i < size; i++) {
        cout << input[i] << " ";
    } 

    delete[] input;
}
