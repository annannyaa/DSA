#include <iostream>
using namespace std;
#include <queue>

void kSortedArray(int input[], int n, int k) {
	priority_queue<int> pq;
	for(int i = 0; i < k; i++) {  //priority queue will have k-1 ele
		pq.push(input[i]);
	}

	int j = 0;
	for(int i = k; i < n; i++) {
		input[j] = pq.top();
		pq.pop();
		pq.push(input[i]);
		j++;
	}


	while(!pq.empty()) {
		input[j] = pq.top();
		pq.pop();
                j++;                //n-k remains unsorted but can be sorted
	}

}
	
int main() {
	int input[] = {10, 12, 6, 7, 9};
	int k = 3;
	kSortedArray(input, 5, k);
	for(int i = 0; i < 5; i++) {
		cout << input[i] << " ";
	}
}
************************************
TIME COMPLEXITY:
1. created a pr. queue of size k, inserted k ele. time- klogk
2. k to n, called remove/pop fn : (n-k)logk
3. k times, called pop k(logk)
adding: (n+k)logk
generally n very large in comp to k . therefore, comp= nlogk
if logk very less than n, then comp= O(n)
any other sorting: comp=nlogn but for k sorted array= O(n).
