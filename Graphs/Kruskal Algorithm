Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Kruskal's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format - 
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1  <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
********************************
#include <bits/stdc++.h>
using namespace std;
class Edge
{
public:
    int weight;
    int dest;
    int source;
};
bool compare(Edge e1,Edge e2){
    return e1.weight<e2.weight; //for ascending order
}
int getParent(int v,int* parent){
    if(parent[v]==v){
        return v;
    }
    return getParent(parent[v],parent);
}
void kruskals(Edge* input, int V, int E){
    sort(input,input+E,compare); //dont pass the inbuilt func, compare thru our func
    Edge* output=new Edge[V-1];
    int *parent=new int[V];
    for(int i=0;i<V;i++){
        parent[i]=i;
    }
    int count=0;
    int i=0;
    while(count!=V-1){
        Edge currentEdge=input[i];
        //Check if we can add the Current Edge to MST or not
        int sourceParent= getParent(currentEdge.source,parent);
        int destParent=getParent(currentEdge.dest,parent);
        if(sourceParent!=destParent){
            output[count]=currentEdge;
            count++;
            parent[sourceParent]=destParent;
        }
        i++;    
    }
    for(int i=0;i<V-1;i++){
        if(output[i].source<output[i].dest){
            cout<<output[i].source<<" "<<output[i].dest<<" "<<output[i].weight<<endl;
        }
        else{
            cout<<output[i].dest<<" "<<output[i].source<<" "<<output[i].weight<<endl;
        }
        
    }
    delete []output;
    delete []parent;
}
int main()
{
    int V, E;
    cin >> V >> E;
    Edge *input = new Edge[E];
    for (int i = 0; i < E; i++)
    {
        cin >> input[i].source;
        cin >> input[i].dest;
        cin >> input[i].weight;
    }
    kruskals(input,V,E);
    delete []input;
}
**********************************************
TIME COMPLEXITY:

1. Take input array- size E
2. Sort input array- ElogE
3. Pick n-1 edges and put in MST (perform cycle detection)- in worst case- skewed tree (for cycle detection for one edge=V time so for E edges=E.V)
O(ElogE+ E.V)- kind of bad because in worst case- E=V^2 (complete graph)
TO improve:

right now, we are using union find algorithm - We can use UNION BY RANK AND PATH COMPRESSION algo- E.V can be changed to ElogV
so final = ElogV +E logE
