Gary has a board of size NxM. Each cell in the board is a coloured dot. There exist only 26 colours denoted by uppercase Latin characters (i.e. A,B,...,Z). Now Gary is getting bored and wants to play a game. The key of this game is to find a cycle that contain dots of same colour. Formally, we call a sequence of dots d1, d2, ..., dk a cycle if and only if it meets the following condition:
1. These k dots are different: if i ≠ j then di is different from dj.
2. k is at least 4.
3. All dots belong to the same colour.
4. For all 1 ≤ i ≤ k - 1: di and di + 1 are adjacent. Also, dk and d1 should also be adjacent. Cells x and y are called adjacent if they share an edge.
Since Gary is colour blind, he wants your help. Your task is to determine if there exists a cycle on the board.
Input Format :
The first line of input contains two space separated integers N and M, where N is number of rows and M is the number of columns of the board. 
Each of the following N lines contain M characters. Please note that characters are not space separated. Each character is an uppercase Latin letter.
Output Format :
Print true if there is a cycle in the board, else print false.
Constraints :
2 <= N <= 1000
2 <= M <= 1000
Time Limit: 1 second
Sample Input 1:
3 4
AAAA
ABCA
AAAA
Sample Output 1:
true
*****************************************************


void initialize(bool ** visited,int n,int m){
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++)
            visited[i][j]=false;
    }
}


bool dfs(char board[][MAXN],char col,int pi,int pj,int i,int j,int n,int m,bool **visited){
    
    //cout<<i<<" "<<j<<endl;
    
    bool d1=(i+1<n && !(i+1==pi && j==pj) && visited[i+1][j]);
    bool d2=(j+1<m && !(i==pi && j+1==pj) && visited[i][j+1]);
    bool d3=(i-1>=0 && !(i-1==pi && j==pj)&& visited[i-1][j]);
    bool d4=(j-1>=0 && !(i==pi && j-1==pj) && visited[i][j-1]);
    
    if(d1 || d2 || d3 || d4)
        return true;
    
    bool ans=false;
    visited[i][j]=true;
    if(i+1<n && board[i+1][j]==col && !visited[i+1][j])
        ans=ans || dfs(board,col,i,j,i+1,j,n,m,visited);
    
    if(j+1<m && board[i][j+1]==col && !visited[i][j+1])
        ans=ans || dfs(board,col,i,j,i,j+1,n,m,visited);
    
    if(i-1>=0 && board[i-1][j]==col && !visited[i-1][j])
        ans=ans || dfs(board,col,i,j,i-1,j,n,m,visited);
    
    if(j-1>=0 && board[i][j-1]==col && !visited[i][j-1])
        ans=ans || dfs(board,col,i,j,i,j-1,n,m,visited);
    
    return ans;
}
bool hasCycle(char board[][MAXN],int n, int m) {
    // Write your code here.
        bool **visited=new bool*[n];
    for(int i=0;i<n;i++){
        visited[i]=new bool[m];
    }
    initialize(visited,n,m);
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            bool ans=false;
            if(!visited[i][j]){
                char color=board[i][j];
                ans=dfs(board,color,i,j,i,j,n,m,visited);
                initialize(visited,n,m);
                //cout<<"======"<<endl;
                //cout<<endl;
                //cout<<ans<<endl;
                if(ans)
                    return 1;
            }
        }
    }
    return 0;
}
**************
void dfs(vector<vector<char>> &board, vector<vector<bool>> &visited,int x,int y,int fromX,int fromY, char needColor, bool &foundCycle,int n,int m){
 if (x < 0 || x >= n || y < 0 || y >= m) {
    return;
 }
 if (board[x][y] != needColor) {
    return;
 }
 if (visited[x][y]) {
    foundCycle = true;
    return;
 }
 visited[x][y] = true;
 int dx[] = {1, -1, 0, 0};
 int dy[] = {0, 0, 1, -1};
 for (int i = 0; i < 4; ++i) {
    int nextX = x + dx[i];
    int nextY = y + dy[i];
    if (nextX == fromX && nextY == fromY)
    {
        continue;
    }
    dfs(board, visited, nextX, nextY, x, y, needColor, foundCycle, n, m);
 }
}
bool hasCycle(vector<vector<char>> &board, int n, int m)
{
    bool foundCycle = false;
    vector<vector<bool>> visited(n, vector<bool>(m, false));
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (!visited[i][j])
            {
                dfs(board, visited, i, j, -1, -1, board[i][j], foundCycle, n, m);
            }
        }
    }
    return foundCycle;
}
MAIN:
#include <iostream>
#include <vector>
using namespace std;

#include "solution.h"

int main() {
    int n, m;
    cin >> n >> m;

    vector<vector<char>> board(n, vector<char>(m));

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cin >> board[i][j];
        }
    }

    cout << (hasCycle(board, n, m) ? "true" : "false");
}
