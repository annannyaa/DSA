Given an undirected graph G(V,E), check if the graph G is connected graph or not.
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
true
Sample Input 2:
4 3
0 1
1 3 
0 3
Sample Output 2:
false 
Sample Output 2 Explanation
The graph is not connected, even though vertices 0,1 and 3 are connected to each other but there isnâ€™t any path from vertices 0,1,3 to vertex 2. 
******

/*
 Time complexity: O(V + E)
 Space complexity: O(V^2)
 where V is the number of vertices in the input graph and
 E is the number of edges in the input graph
*/
#include <iostream>
using namespace std;
void DFS(bool **graph, int v, bool *visited, int currentVertex)
{
    visited[currentVertex] = true;
    for (int i = 0; i < v; ++i)
    {
        if (graph[currentVertex][i] && !visited[i])
        {
            DFS(graph, v, visited, i);
        }
    }
}
bool isConnected(bool **graph, int v)
{
    bool *visited = new bool[v]();
    DFS(graph, v, visited, 0);
    for (int i = 0; i < v; ++i)
    {
        if (!visited[i])
        {
            return false;
        }
    }
    return true;
}
int main()
{
    int v, e;
    cin >> v >> e;
    bool **graph = new bool *[v];
    for (int i = 0; i < v; ++i)
    {
        graph[i] = new bool[v]();
    }
    for (int i = 0, a, b; i < e; ++i)
    {
        cin >> a >> b;
        graph[a][b] = true;
        graph[b][a] = true;
    }
    cout << (isConnected(graph, v) ? "true" : "false");
    for (int i = 0; i < v; ++i)
    {
        delete[] graph[i];
    }
    delete[] graph;
}
