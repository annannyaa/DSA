It's Gary's birthday today and he has ordered his favourite square cake consisting of '0's and '1's . But Gary wants the biggest piece of '1's and no '0's . A piece of cake is defined as a part which consist of only '1's, and all '1's share an edge with each other on the cake. Given the size of cake N and the cake, can you find the count of '1's in the biggest piece of '1's for Gary ?

Sample Input 1:
2
1 1
0 1
Sample Output 1:
3

void dfs(char cake[NMAX][NMAX],int n,int &k,int i,int j){

    k++;

    cake[i][j]='0';

    

    if(i+1<n && cake[i+1][j]=='1')

        dfs(cake,n,k,i+1,j);

    if(i-1>=0 && cake[i-1][j]=='1')

        dfs(cake,n,k,i-1,j);

    if(j+1<n && cake[i][j+1]=='1')

        dfs(cake,n,k,i,j+1);

    if(j-1>=0 && cake[i][j-1]=='1')

        dfs(cake,n,k,i,j-1);

    

}

int getBiggestPieceSize(char cake[NMAX][NMAX],int n) {
    // Write your code here
    
	// Write your code here .   
    int ans=0;

    for(int i=0;i<n;i++){

        for(int j=0;j<n;j++){

            

            if(cake[i][j]=='1'){

                int k1=0;

                dfs(cake,n,k1,i,j);

              ans=max(ans,k1);

            }

        }

    }

    return ans;

}
*********************************************
/*
 Time complexity: O(N^2)
 Space complexity: O(N^2)
 where N by N are the dimensions of the cake
*/
// Consider the cake to be connected graph with every vertex c
int dfs(vector<vector<int>> &cake, vector<vector<bool>> &visited, int x, int y, int n)
{
    if (visited[x][y])
    {
        return 0;
    }
    visited[x][y] = true;
    int count = 1;
    int dx[] = {0, 0, -1, 1}; // Change in x while taking four moves
    int dy[] = {1, -1, 0, 0}; // Change in y while taking four moves
    for (int i = 0; i < 4; ++i)
    {
        int X = x + dx[i];
        int Y = y + dy[i];
        if (X >= 0 && X < n && Y >= 0 && Y < n && cake[X][Y] == 1)
        {
            count += dfs(cake, visited, X, Y, n);
        }
    }
    return count;
}
int getBiggestPieceSize(vector<vector<int>> &cake, int n)
{
    int biggestPieceSize = 0;
    vector<vector<bool>> visited(n, vector<bool>(n, false));
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (cake[i][j] == 1 && !visited[i][j])
            {
 biggestPieceSize = max(biggestPieceSize, dfs(cake,visited,i,j,n);
            }
        }
    }
    return biggestPieceSize;
}

