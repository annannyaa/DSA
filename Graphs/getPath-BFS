Given an undirected graph G(V, E) and two vertices v1 and v2 (as integers), find and print the path from v1 to v2 (if exists). Print nothing if there is no path between v1 and v2.
Find the path using BFS and print the shortest path available.
Sample Input 1 :
4 4
0 1
0 3
1 2
2 3
1 3
Sample Output 1 :
3 0 1
Sample Input 2 :
6 3
5 3
0 1
3 4
0 3
Sample Output 2 :

#include <iostream>
#include <vector>
#include<unordered_map>
#include <queue> 
using namespace std;


void BFS(vector<vector<int> > &graph , vector<bool> & visited ,int v, int sv , int ev , vector<int>& path)
{ 
    if( sv == ev)
    { path.push_back(sv); return ;}


    queue<int> pn;
    unordered_map<int, int> m;
    pn.push(sv);
    visited[sv]=1;


    while(!pn.empty())
    {
        int s= pn.front ();
        pn.pop();

        if(graph[s][ev])
        {
            path.push_back(ev);
            while(s!=sv)
            {
                path.push_back(s);
                s=m[s];
                
            }
            path.push_back(sv); 
            return;

        }

        for(int i=0 ; i< v ; i++)
        {
            if(!visited[i]&& graph[s][i])
            {
                m[i]=s,pn.push(i), visited[i]=1;
            }
        }
    }

}

void getPath(int **edges, int n, bool *visited, int v1, int v2)
{
    if(v1 == v2)
    {
        cout << v1 << " ";
        return;
    }
    
    unordered_map <int,int> map;
    
    queue <int> q;
    q.push(v1);
    visited[v1] = true;
    
    while(!q.empty())
    {
        int currentIndex = q.front();
        q.pop();
        
        for(int i=0; i<n; i++)
        {
            if(edges[currentIndex][i] == 1 && !visited[i])
            {
                if(i == v2)
                {
                    cout << v2 << " ";
                    map[v2] = currentIndex;
                    
                    int j = v2;
                    while(j != v1)
                    {
                        cout << map[j] << " ";
                        j = map[j];
                    }
                    return;
                }
                
                else
                {
                    q.push(i);
                    visited[i] = true;
                    map[i] = currentIndex;
                }
            }
        }
    }
}

 

vector<int> * getpath( int ** graph , int v , int s ,int e , bool * visited)
{
    queue<int> pn;
    unordered_map<int ,int> m;
    pn.push(s);
    visited[s]=true;

    while(!pn.empty())
    {
        int t= pn.front();
        
        pn.pop();
       

        for(int i=0 ; i<v ;i++)
        {
            if(graph[t][i]==1 && !visited[i])
            { 
                pn.push(i);
                m[i]=t;
                
                visited[i]=true;
                if(i==e)
                {
                    vector<int> * ans = new vector<int>();
                    
                    ans->push_back(e);
                    int x =e;
                    while(m[x]!=s)
                    {
                        ans->push_back(m[x]);
                        x=m[x];
                    }
                    ans->push_back(s);
                    
                    return ans;
                }
            }
        }
        
       
}
     return NULL;
}
int main() {
    // Write your code here
      int V, E;
  cin >> V >> E;
 
    int** graph = new int * [V];
    for( int i=0 ;i<V ;i++)
    {
        graph[i]= new int[V];
        for( int j=0 ;j<V ;j++)
            graph[i][j]=0;

    }
    for (int i=0 ;i<E ;i++)
    {
		int x ,y ;
        cin>>x>>y ;
        graph[x][y]=1;
        graph[y][x]=1;
    }
    bool * visited = new bool[V];
    for ( int i=0 ;i<V ;i++)
        visited[i]=false;
 
    int s ,e ;
    cin>>s>>e;
  
    vector<int> * ans = getpath(graph , V,s,e,visited);
    if(ans)
    {
    for(int i=0 ;i< ans->size(); i++)
        cout<< ans->at(i) << " ";
    }
    
    delete ans;
    
for(int i=0 ;i<V ;i++)
{
    delete [] graph[i];
}
    delete [] graph;
    
    delete [] visited;
    
  return 0;
}
*****************************************
/*
 Time complexity: O(V + E)
 Space complexity: O(V^2)
 where V is the number of vertices in the input graph and
 E is the number of edges in the input graph
*/
#include <iostream>
#include <queue>
#include <vector>
using namespace std;
vector<int> *getBFSPath(bool **graph, int v, int start, int end)
{
    queue<int> pendingVertices;
    bool *visited = new bool[v]();
    pendingVertices.push(start);
    visited[start] = true;
    bool pathFound = false;
    vector<int> parent(v, -1);
    while (!pendingVertices.empty() && !pathFound)
    {
        int front = pendingVertices.front();
        pendingVertices.pop();
        for (int i = 0; i < v; i++)
        {
            if (graph[front][i] && !visited[i])
            {
                parent[i] = front;
                pendingVertices.push(i);
                visited[i] = true;
                if (i == end)
                {
                    pathFound = true;
                    break;
                }
            }
        }
    }
    delete[] visited;
    if (!pathFound)
    {
        return NULL;
    }
    vector<int> *output = new vector<int>();
    int current = end;
    output->push_back(end);
    while (current != start)
    {
        current = parent[current];
        output->push_back(current);
    }
    return output;
}
int main()
{
    int v, e;
    cin >> v >> e;
    bool **graph = new bool *[v];
    for (int i = 0; i < v; ++i)
    {
        graph[i] = new bool[v]();
    }
    for (int i = 0, a, b; i < e; ++i)
    {
        cin >> a >> b;
        graph[a][b] = true;
        graph[b][a] = true;
        int start, end;
        cin >> start >> end;
        vector<int> *output = getBFSPath(graph, v, start, end);
        if (output != NULL)
        {
            for (int i = 0; i < output->size(); ++i)
            {
                cout << output->at(i) << " ";
            }
            delete output;
        }
        for (int i = 0; i < v; ++i)
        {
            delete[] graph[i];
        }
        delete[] graph;
    }
